mutation RegisterWithCredentials(
  $registerWithCredentialsInput: RegisterWithCredentialsInput!
) {
  registerWithCredentials(
    registerWithCredentialsInput: $registerWithCredentialsInput
  ) {
    createdAt
    name
    uid
    image
    updatedAt
  }
}

mutation Login($loginInput: LoginInput!) {
  login(loginInput: $loginInput) {
    token
    user {
      uid
      name
      image
    }
  }
}

query GetAuthProvider($uid: String!) {
  getAuthProvider(uid: $uid) {
    type
    uid
  }
}

mutation RegisterWithProvider(
  $registerWithProviderInput: RegisterWithProviderInput!
) {
  registerWithProvider(registerWithProviderInput: $registerWithProviderInput) {
    uid
  }
}

query SearchGarages(
  $dateFilter: DateFilterInput!
  $locationFilter: LocationFilterInput!
  $slotsFilter: SlotWhereInput
  $garageFilter: GarageFilter
) {
  searchGarages(
    dateFilter: $dateFilter
    locationFilter: $locationFilter
    slotsFilter: $slotsFilter
    garageFilter: $garageFilter
  ) {
    id
    address {
      address
      lat
      lng
    }
    images
    availableSlots(dateFilter: $dateFilter, slotsFilter: $slotsFilter) {
      type
      pricePerHour
      count
    }
    verification {
      verified
    }
    displayName
  }
}

query MyCompany {
  myCompany {
    id
    garages {
      id
      description
      displayName
      address {
        id
        lat
        lng
        address
      }
    }
    createdAt
    displayName
  }
}

mutation CreateCompany($createCompanyInput: CreateCompanyInput!) {
  createCompany(createCompanyInput: $createCompanyInput) {
    id
  }
}

query Garages(
  $skip: Float
  $take: Float
  $cursor: GarageWhereUniqueInput
  $orderBy: [GarageOrderByWithRelationInput!]
  $where: GarageWhereInput
) {
  garages(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
  ) {
    id
    displayName
    description
    images
    verification {
      verified
    }
    address {
      id
      lat
      lng
      address
    }
    slotCounts {
      type
      count
    }
  }

  garagesCount(where: $where) {
    count
  }
}

mutation CreateGarage($createGarageInput: CreateGarageInput!) {
  createGarage(createGarageInput: $createGarageInput) {
    id
  }
}

mutation CreateManySlots($createSlotInput: CreateSlotInput!, $count: Float!) {
  createManySlots(createSlotInput: $createSlotInput, count: $count) {
    count
  }
}